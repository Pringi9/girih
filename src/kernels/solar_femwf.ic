void femwd_solar( const int shape[3], const int xb, const int yb_r0, const int zb, const int xe, const int ye_r0, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int tgs_mc;// = stencil_ctx.thread_group_size/stencil_ctx.th_c;

#pragma omp parallel default(none) shared(tgs_mc, stencil_ctx, shape, roc2, coef, mtid, xb, xe, zb, ze, yb_r0, ye_r0, tb, te, t_dim, b_inc, e_inc, NHALO, u) num_threads(stencil_ctx.thread_group_size) PROC_BIND(master)
  {
    int i, j, k, t, yb, ye, zi, kt,kb, ke, nwf, th_nwf, tid, gtid, q, r, tgs, err, ib, ie;
    double t_start;






    tgs = stencil_ctx.thread_group_size;
    nwf = stencil_ctx.num_wf;

    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif

    if(stencil_ctx.use_manual_cpu_bind == 1){
      err = sched_setaffinity(0, stencil_ctx.setsize, stencil_ctx.bind_masks[mtid*tgs+tid]);
      if(err==-1) printf("WARNING: Could not set CPU Affinity\n");
    }





    int th_x = stencil_ctx.th_x;
    int th_z = stencil_ctx.th_z;

    // tid = tid_z*(th_x*th_y) + tid_y*th_x + tid_x
    int tid_x = tid%th_x;
    int tid_z = tid/(th_x);

    int yb_r = yb_r0;
    int ye_r = ye_r0;

    int nbx = (xe-xb)/th_x;
    q = (int)((xe-xb)/th_x);
    r = (xe-xb)%th_x;
    if(tid_x < r) {
      ib = xb + tid_x * (q+1);
      ie = ib + (q+1);
    }else {
      ib = xb + r * (q+1) + (tid_x - r) * q;
      ie = ib + q;
    }

    th_nwf = nwf/th_z;

//      printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);
    for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

      if(ze-zi < nwf){ 
        nwf = ze-zi;
      }

      yb = yb_r;
      ye = ye_r;

      kt = zi;
      for(t=tb; t< te; t++){ // Diamond blocking in time
      // kb = kt; 
      // ke = kt+nwf;

        // Update E-field when more than silce available and not first iteration of the prologue
        if( (yb<ye) && (tb==0 | t!=tb)){
          for(k=kt; k<kt+nwf; k++){
            if( ((k-NHALO)/th_nwf)%th_z == tid_z ){
              kb=k;

              ke=kb+1;
              while( (ke<kt+nwf) && (((ke-NHALO)/th_nwf)%th_z == tid_z) )
                ke++;
              k=ke;

              // compute E-field (except at first and last time steps of right-half diamond)
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXZ);
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYZ);
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYX);
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZX);
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXY);
              solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZY);
              // Update block size in Y
            }
          }
        }
        if(t <= t_dim) ye += e_inc; // lower half of the diamond
        else         yb += b_inc; // upper half of the diamond

        t_start = MPI_Wtime();
#pragma omp barrier
        stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start; 
        if( (yb<ye) && (te>(t_dim*2) | t!=te-1) ){ // More than slice available and not epilogue's last time step
          for(k=kt; k<kt+nwf; k++){
            if( ((k-NHALO)/th_nwf)%th_z == tid_z ){
              kb=k;

              ke=kb+1;
              while( (ke<kt+nwf) && (((ke-NHALO)/th_nwf)%th_z == tid_z) )
                ke++;
              k=ke;

              // compute H-field
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYX);
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZX);
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXY);
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZY);
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXZ);
              solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYZ);
              // Update block size in Y
            }
          }
        }
        if(t < t_dim) yb -= b_inc; // lower half of the diamond
        else         ye -= e_inc; // upper half of the diamond 

        t_start = MPI_Wtime();
#pragma omp barrier
        stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;

        kt -= NHALO;
      } // diamond blocking in time (time loop)
    } // wavefront loop
  } // parallel region
}
