void TEMPLATE(mwd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int i, j, k, t, yb, ye, zi, kt, ib, ie;
  int ib_r, ie_r, bs_x, thb, the, nwf, tid, gtid, th_nwf, tgs, q, r;
  int nny =shape[1];
  int nnx =shape[0];
  uint64_t  ln_domain = ((uint64_t) 1)* shape[0]*shape[1]*shape[2];
  double t_start;
  
  bs_x = stencil_ctx.bs_x;
  tgs = stencil_ctx.thread_group_size;
  nwf = stencil_ctx.num_wf;
  th_nwf = nwf/tgs;


#pragma omp parallel default(none) shared(stencil_ctx, roc2, ln_domain, coef, nnx, nny, tgs, nwf, th_nwf, mtid, xb, xe, bs_x, zb, ze, yb_r, ye_r, tb, te, t_dim, b_inc, e_inc, NHALO) \
        firstprivate(u, v) \
        private(tid, gtid, ib_r, ie_r, zi, yb, ye, ib, ie, kt, t, k, j, i, thb, the, q, r, t_start) \
        num_threads(stencil_ctx.thread_group_size)
  {
    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif

    real_t * restrict u_r = u;
    real_t * restrict v_r = v;

    for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
      ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);
 
      thb = th_nwf*tid;
      the = th_nwf*(tid+1);
//      printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);
      for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

        if(ze-zi < nwf){ 
          q = (int)((ze-zi)/tgs);
          r = (ze-zi)%tgs;
          if(tid < r) {
            thb = tid * (q+1);
            the = thb + (q+1);
          }else {
            thb = r * (q+1) + (tid - r) * q;
            the =thb + q;
          }
        }

        yb = yb_r;
        ye = ye_r;

        ib = ib_r;
        ie = ie_r;

        kt = zi;
        for(t=tb; t< te; t++){ // Diamond blocking in time
          if(t%2 == 0){ //swap pointers
            u = v_r; v = u_r;
          } else{
            u = u_r; v = v_r;
          }

          for(k=kt+thb; k<kt+the; k++){
            for(j=yb; j<ye; j++) {
    #pragma simd
              for(i=ib; i<ie; i++) {
                FUNC_BODY()
              }
            }
          }

          // Update block size in Y
          if(t< t_dim){ // lower half of the diamond
            yb -= b_inc;
            ye += e_inc;
          }else{ // upper half of the diamond
            yb += b_inc;
            ye -= e_inc;
          }

          // Update block size in X
          if (ib != xb) ib-=NHALO; 
          if (ie != xe) ie-=NHALO;

          kt -= NHALO;

          t_start = MPI_Wtime();
#pragma omp barrier
          stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;

        } // diamond blocking in time (time loop)
      } // wavefront loop
    } // blocking in x
  } // parallel region
}
