void TEMPLATE(rsfemwd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int i, j, k, t, yb, ye, zi, kt, ib, ie;
  int ib_r, ie_r, bs_x, nwf, tid, gtid, th_nwf, tgs, q, r;
  int nny =shape[1];
  int nnx =shape[0];
  unsigned long  ln_domain = shape[0]*shape[1]*shape[2];
  int time_blk = te-tb; //t_dim*2+1; //temporal block size
  double t_start;
  
  bs_x = stencil_ctx.bs_x;
  tgs = stencil_ctx.thread_group_size;

  const int CL=128/sizeof(unsigned long);
  volatile unsigned long *status;
  posix_memalign((void **)&status, 128, CL*tgs*sizeof(unsigned long));
  for(i=0; i<tgs; i++){
    status[i*CL]=0;
  }
//  int volatile current_z=0;

#pragma omp parallel default(none) shared(stencil_ctx, status, roc2, ln_domain, coef, nnx, nny, tgs, mtid, xb, xe, bs_x, zb, ze, yb_r, ye_r, time_blk, tb, te,  t_dim, b_inc, e_inc, NHALO) \
        firstprivate(u, v) \
        private(nwf, th_nwf, tid, gtid, ib_r, ie_r, zi, yb, ye, ib, ie, kt, t, k, j, i, q, r, t_start) \
        num_threads(stencil_ctx.thread_group_size)
  {
    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif
    int left_tid_idx = ((tid+tgs-1)%tgs)*CL;
    int right_tid_idx = ((tid+1)%tgs)*CL;
    int tid_idx = tid*CL;

    real_t * restrict u_r = u;
    real_t * restrict v_r = v;
 
    for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
      ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);

      nwf = stencil_ctx.num_wf;
      th_nwf = nwf/tgs;

//      printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);
      for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

        if(ze-zi < nwf){ 
          nwf = ze-zi;
          th_nwf = nwf/tgs;
          if(th_nwf < 1) th_nwf=1;
        }

        yb = yb_r;
        ye = ye_r;

        ib = ib_r;
        ie = ie_r;

        kt = zi;
        for(t=tb; t< te; t++){ // Diamond blocking in time
       
          if(t%2 == 0){ //swap pointers
            u = v_r; v = u_r;
          } else{
            u = u_r; v = v_r;
          }

          // spin-wait for data dependencies if not first time step and not last wavefront with remainder
          if((t>0) && (nwf == stencil_ctx.num_wf)) {
            t_start = MPI_Wtime();
            int kth = kt-NHALO;
            for(k=kth; k<kth+nwf; k++){
              if( (k/th_nwf)%tgs == tid ) {

                // left neighbor dependency
                if(k>=kth+2*NHALO){ // left neighbor in same frontline 
                  if( ((k-NHALO)/th_nwf)%tgs != tid ){ // left data belong to the left thread
                    while(status[tid_idx] > status[left_tid_idx]){
                      asm("");
                    }
                  }
                }else { // left neighbor belongs to previous frontlint
                  if( ((k-NHALO)/th_nwf)%tgs != tid ){ // left data belong to the left thread
                    while(status[tid_idx] > (status[left_tid_idx]+time_blk)){
                      asm("");
                    }
                  }
                } // left neighbor dependency

                // right data dependency
                if( ((k+NHALO)/th_nwf)%tgs != tid ){ // right data belong to the right thread
                  while(status[tid_idx] > status[right_tid_idx]){
                    asm("");
                  }
                } // right data dependency

              }
            }
            stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;
          }

          
          for(k=kt; k<kt+nwf; k++){
            if( ((k-NHALO)/th_nwf)%tgs == tid ) {
              for(j=yb; j<ye; j++) {
      #pragma simd
                for(i=ib; i<ie; i++) {
                  FUNC_BODY()
                }
              }
            }
          }

          //update current thread time step status
          status[tid_idx]++;

          // Update block size in Y
          if(t< t_dim){ // lower half of the diamond
            yb -= b_inc;
            ye += e_inc;
          }else{ // upper half of the diamond
            yb += b_inc;
            ye -= e_inc;
          }

          // Update block size in X
          if (ib != xb) ib-=NHALO; 
          if (ie != xe) ie-=NHALO;
          kt -= NHALO;

          if(nwf != stencil_ctx.num_wf){ // Last frontline update has remainder
            t_start = MPI_Wtime();
            #pragma omp barrier
            stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;
          }

        } // diamond blocking in time (time loop)
      } // wavefront loop
#pragma omp barrier
    } // blocking in x
  } // parallel region
}
