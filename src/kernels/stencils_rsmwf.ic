void TEMPLATE(rsmwd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const FLOAT_PRECISION * restrict coef, FLOAT_PRECISION * restrict u,
    FLOAT_PRECISION * restrict v, const FLOAT_PRECISION * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int i, j, k, t, yb, ye, zi, kt, ib, ie;
  int ib_r, ie_r, bs_x, thb, the, nwf, tid, gtid, th_nwf, tgs, q, r;
  int nny =shape[1];
  int nnx =shape[0];
  unsigned long  ln_domain = shape[0]*shape[1]*shape[2];
  int time_blk = te-tb; //temporal block size
  double t_start;
  
  bs_x = stencil_ctx.bs_x;
  tgs = stencil_ctx.thread_group_size;
  nwf = stencil_ctx.num_wf;
  th_nwf = nwf/tgs;
  const int CL=128/sizeof(unsigned long);
  volatile unsigned long *status;
  posix_memalign((void **)&status, 128, CL*tgs*sizeof(unsigned long));
  for(i=0; i<tgs; i++){
    status[i*CL]=0;
  }
  int volatile current_z=0;

#pragma omp parallel default(none) shared(stencil_ctx, current_z, status, roc2, ln_domain, coef, nnx, nny, tgs, nwf, th_nwf, mtid, xb, xe, bs_x, zb, ze, yb_r, ye_r, time_blk, tb, te, t_dim, b_inc, e_inc, NHALO) \
        firstprivate(u, v) \
        private(tid, gtid, ib_r, ie_r, zi, yb, ye, ib, ie, kt, t, k, j, i, thb, the, q, r, t_start) \
        num_threads(stencil_ctx.thread_group_size)
  {
    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif
    int left_tid_idx = ((tid+tgs-1)%tgs)*CL;
    int tid_idx = tid*CL;

    FLOAT_PRECISION * restrict u_r = u;
    FLOAT_PRECISION * restrict v_r = v;
 
    for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
      ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);
 
      thb = th_nwf*tid;
      the = th_nwf*(tid+1);
//printf("tid:%d thb:%d the:%d\n", tid, thb, the);
//      printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);
      for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

        if(tid == tgs-1) current_z = zi; // to respect dependencies across frontlines

        if(ze-zi < nwf){ 
          q = (int)((ze-zi)/tgs);
          r = (ze-zi)%tgs;
          if(tid < r) {
            thb = tid * (q+1);
            the = thb + (q+1);
          }else {
            thb = r * (q+1) + (tid - r) * q;
            the =thb + q;
          }
        }

        yb = yb_r;
        ye = ye_r;

        ib = ib_r;
        ie = ie_r;

        kt = zi;
        for(t=tb; t< te; t++){ // Diamond blocking in time
       
          if(t%2 == 0){ //swap pointers
            u = v_r; v = u_r;
          } else{
            u = u_r; v = v_r;
          }
 
          // spin-wait ensure respecting data dependencies across threads
          if(t!=0){
            t_start = MPI_Wtime();
            if(tid == 0){ // wait for dependencies across frontlines
              while( (zi > current_z) & (status[tid_idx]+1 > (status[left_tid_idx]+time_blk)) ){
                asm("");
              }
            }
            else{ // wait for dependencies within the frontline
              while(status[tid_idx]+1 > status[left_tid_idx]){
                asm("");
              }
            }
            stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;
          }

         
          for(k=kt+thb; k<kt+the; k++){
            for(j=yb; j<ye; j++) {
    #pragma simd
              for(i=ib; i<ie; i++) {
                FUNC_BODY()
              }
            }
          }


/*          switch(tid){
            case 0:
              printf("%d:%04lu\n", t, status[tid_idx]);
              break;
            case 1:
              printf("       %d:%04lu\n",t, status[tid_idx]);
              break;
            case 2:
              printf("              %d:%04lu\n",t, status[tid_idx]);
              break;
            case 3:
              printf("                     %d:%04lu\n",t, status[tid_idx]);
              break;
          }
 
if(status[tid_idx] > status[left_tid_idx] && tid>0  && t!=0) printf("################################################### [%d] t:%d  st:%lu  lst:%lu\n", tid, t, status[tid_idx], status[left_tid_idx]);
*/
//printf("[%d] t:%d  st:%d  lst:%d\n", tid, t, status[tid_idx], status[left_tid_idx]);

          //update current thread time step status
          status[tid_idx]++;

         // Update block size in Y
          if(t< t_dim){ // lower half of the diamond
            yb -= b_inc;
            ye += e_inc;
          }else{ // upper half of the diamond
            yb += b_inc;
            ye -= e_inc;
          }
          // Update block size in X
          if (ib != xb) ib-=NHALO; 
          if (ie != xe) ie-=NHALO;
          kt -= NHALO;

        } // diamond blocking in time (time loop)
//printf("--------\n");
      } // wavefront loop
      #pragma omp barrier
//printf("--------------------------\n");
    } // blocking in x
  } // parallel region

  free((void*)status);
}
