#ifndef DEBUG
#define DEBUG  (0)
#endif

void TEMPLATE(rsmwd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r0, const int zb, const int xe, const int ye_r0, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int i, j, k, t, yb, ye, zi, kt, ib, ie;
  int ib_r, ie_r, bs_x, thb, the, nwf, tid, gtid, tgs, q, r;
  const int nny =shape[1];
  const int nnx =shape[0];
  const unsigned long nnxy = 1UL * nnx * nny;
  uint64_t  ln_domain = ((uint64_t) 1)* shape[0]*shape[1]*shape[2];
  unsigned long time_blk = te-tb; //temporal block size
  double t_start;
  
  bs_x = stencil_ctx.bs_x;
  tgs = stencil_ctx.thread_group_size;
  nwf = stencil_ctx.num_wf;

  int th_x = stencil_ctx.th_x;
  int th_y = stencil_ctx.th_y;
  int th_z = stencil_ctx.th_z;

  // at half diam use the y-threads along z-axis make sure to use sufficient number of frontlines
  if( (th_y==2) && (b_inc ==0 | e_inc==0) ){ 
    th_z *= 2;
    th_y = 1;
    if (nwf < th_z) nwf = th_z;
  }


  const int CL=128/sizeof(uint64_t);
  volatile uint64_t *status_z, *status_y;
  posix_memalign((void **)&status_z, 128, CL*th_z*sizeof(uint64_t));
  for(i=0; i<th_z; i++){
    status_z[i*CL]=1000;
  }
  posix_memalign((void **)&status_y, 128, CL*2*th_z*sizeof(uint64_t));
  for(i=0; i<2*th_z; i++){
    status_y[i*CL]=10;
  }


#pragma omp parallel default(none) shared(th_x, th_y, th_z, status_y, stencil_ctx, status_z, roc2, ln_domain, coef, nnx, nny,nnxy, tgs, nwf, mtid, xb, xe, bs_x, zb, ze, yb_r0, ye_r0, time_blk, tb, te, t_dim, NHALO) \
        firstprivate(u, v, b_inc, e_inc) \
        private(tid, gtid, ib_r, ie_r, zi, yb, ye, ib, ie, kt, t, k, j, i, thb, the, q, r, t_start) \
        num_threads(stencil_ctx.thread_group_size)
  {
    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif
    uint64_t time_stamp_c;
    double time_stamp;

#if DEBUG
    uint64_t lst;
    char *spaces [] = {"       ", 
                       "                ",
                       "                         ",
                       "                                  "};
#endif

    int z_lag = 1;
    if(NHALO > 1) z_lag = 0; // keep the wavefront tight for high order stencils
    if(tid ==0) z_lag-=time_blk; // first thread depends on data from prev. wavefront

    real_t * restrict u_r = u;
    real_t * restrict v_r = v;
    real_t *restrict ux, *restrict vx;
 
    uint64_t  st_z, st_y;
    int th_nwf;

    // tid = tid_z*(th_x*th_y) + tid_y*th_x + tid_x
    int tid_x = tid%th_x;
    int tid_y = (tid-tid_x)%th_y;// (tid/th_x)%2;
    int tid_z = tid/(th_x*th_y);

    int yb_r = yb_r0;
    int ye_r = ye_r0;

    if(th_y==2){
      if (tid_y%2 == 0){ // left thread
        ye_r = (yb_r + ye_r)/2;
        e_inc = 0;
      } else{
        yb_r = (yb_r + ye_r)/2;
        b_inc = 0;
      }
    }
/*
    int nbx = (xe-xb)/th_x;
    q = (int)((xe-xb)/th_x);
    r = (xe-xb)%th_x;
    if(tid_x < r) {
      ib = xb + tid_x * (q+1);
      ie = ib + (q+1);
    }else {
      ib = xb + r * (q+1) + (tid_x - r) * q;
      ie = ib + q;
    }
*/

    // index of neighbors at the CL-spaced status array
    int tid_z_idx = tid_z*CL;
    int left_tid_z_idx = ((tid_z+th_z-1)%th_z)*CL;

    int tid_y_idx = (tid_y + 2*tid_z)*CL;
    int other_tid_y_idx = ((tid_y+1)%2 + 2*tid_z)*CL;

    int tid_x_idx = tid_x*CL;
//    printf("tid:%d th(z,y,x):(%d,%d,%d)  st_idx(z,y):(%d,%d) st_neighbor(z,y):(%d,%d)\n", tid, tid_z,tid_y,tid_x,tid_z_idx, tid_y_idx,  left_tid_z_idx, other_tid_y_idx);
//    #pragma omp barrier

//    for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
//      ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);
      ib_r=xb;
      ie_r=xe; 

      th_nwf = nwf/th_z;
      thb = th_nwf*tid_z;
      the = th_nwf*(tid_z+1);
//printf("tid:%d thb:%d the:%d\n", tid, thb, the);
//printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);

//printf("[%02d, %02d] b_inc:%d e_inc:%d tb:%d te:%d yb_r0:%d ye_r0:%d yb_r:%d ye_r:%d nwf:%d th_nwf:%d th_z:%d\n", gtid, tid, b_inc, e_inc, tb, te, yb_r0, ye_r0, yb_r, ye_r, nwf, th_nwf, th_z);

      for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

        if(ze-zi < nwf){ 
          q = (int)((ze-zi)/th_z);
          r = (ze-zi)%th_z;
//          if(q==0 && tid_z >= r) continue;
          if(tid_z < r) {
            thb = tid_z * (q+1);
            the = thb + (q+1);
          }else {
            thb = r * (q+1) + (tid_z - r) * q;
            the =thb + q;
          }
        }
        yb = yb_r;
        ye = ye_r;

        ib = ib_r;
        ie = ie_r;

        kt = zi;

//printf("th(z,y):%d,%d nwf:%d z:%d thb,the:%d,%d\n", tid_z, tid_y, nwf, zi, thb, the );
 /*       // prefetch entire block, one cache line per loop
        for(k=kt+nwf+thb; k<kt+nwf+the; k++){
          for(j=yb-b_inc*t_dim; j<ye+e_inc*t_dim; j++) {
            ux = &(u[1ULL*k*nnxy + j*nnx]);
            vx = &(v[1ULL*k*nnxy + j*nnx]);
            for(i=ib; i<ie; i+=(128/sizeof(real_t))) {
              _mm_prefetch((char*)&ux[i], _MM_HINT_T2);
              _mm_prefetch((char*)&vx[i], _MM_HINT_T2);
            }
          }
        }
*/
        for(t=tb; t< te; t++){ // Diamond blocking in time
          st_z = status_z[tid_z_idx];

          if(t%2 == 0){ //swap pointers
            u = v_r; v = u_r;
          } else{
            u = u_r; v = v_r;
          }
#if DEBUG 
          time_stamp_c = rdtsc();
          time_stamp = ((double) (time_stamp_c%1000000ULL))/(2.301e3);
          lst = status_z[left_tid_z_idx];
#endif
          for(k=kt+thb; k<kt+the; k++){
            for(j=yb; j<ye; j++) {
              ux = &(u[1ULL*k*nnxy + j*nnx]);
              vx = &(v[1ULL*k*nnxy + j*nnx]);
    #pragma simd
              for(i=ib; i<ie; i++) {
                FUNC_BODY()
              }
            }
          }

#if DEBUG
printf("%lu %05.1f z:%d th(z,y):%d,%d %s %d:%04lu:%02lu\n" ,time_stamp_c,time_stamp, zi/nwf, tid_z, tid_y%2, spaces[tid], t, st_z, status_y[tid_y_idx]);
//if(st_z >= lst && tid>0  && t!=tb) printf("%lu ################################################### [%d] t:%d  st_z:%lu  lst:%lu\n", time_stamp_c,  tid, t, status_z[tid_idx], lst);
#endif
         // Synchronize
         t_start = MPI_Wtime();
         // Spin-wait ensure respecting data dependencies across threads along z-axis
          if((tid_y==0) & (t<te-1)){
            while(st_z >= status_z[left_tid_z_idx] -z_lag){
              asm("");
//sleep(1); printf("%lu %05.1f z:%d th(z,y):%d,%d %s %d:%04lu:%02lu\n" ,time_stamp_c,time_stamp, zi/nwf, tid_z, tid_y%2, spaces[tid], t, st_z, status_y[tid_y_idx]);
            }
          }
          // Synchronize local threads along y-axis
          if(th_y>1){
            st_y = ++status_y[tid_y_idx];
            while(st_y > status_y[other_tid_y_idx]){
              asm("");
//sleep(1); printf("%lu %05.1f z:%d th(z,y):%d,%d %s %d:%04lu:%02lu\n" ,time_stamp_c,time_stamp, zi/nwf, tid_z, tid_y%2, spaces[tid], t, st_z, status_y[tid_y_idx]);
            }
          }
          stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;


          //update current thread time step status_z
          if(tid_y==0) status_z[tid_z_idx]++;

         // Update block size in Y
          if(t< t_dim){ // lower half of the diamond
            yb -= b_inc;
            ye += e_inc;
          }else{ // upper half of the diamond
            yb += b_inc;
            ye -= e_inc;
          }
//          // Update block size in X
//          if (ib != xb) ib-=NHALO; 
//          if (ie != xe) ie-=NHALO;

          kt -= NHALO;
//      #pragma omp barrier

        } // diamond blocking in time (time loop)
//printf("--------\n");
      } // wavefront loop
//      #pragma omp barrier
//printf("--------------------------\n");
//    } // blocking in x
  } // parallel region

#if DEBUG
printf("--------------------------\n");
#endif
#if 0
  int nnz = shape[2];
  for (i=NHALO; i<nnz-NHALO; i++) {
    // new page
    printf("\n***************** slice # %d *************\n",i+1-NHALO);
    for (j=NHALO; j<nny-NHALO; j++) {
      for (k=NHALO; k<nnx-NHALO; k++) {
        printf("%+.4e ", u[(i*nny+j)*nnx+k]);
      }
      // new line
      printf("\n");
    }
  }
#endif

  free((void*)status_z);
  free((void*)status_y);
}
